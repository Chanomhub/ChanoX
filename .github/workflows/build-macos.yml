name: Build macOS

on:
  push:
    branches:
      - main
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read

jobs:
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Cache Rust
        if: hashFiles('**/Cargo.toml') != ''
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-${{ matrix.arch }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-cargo-

      - name: Install Rust Target
        if: matrix.arch == 'x64' && hashFiles('**/Cargo.toml') != ''
        run: rustup target add x86_64-apple-darwin

      - name: Update Browserslist
        run: npx update-browserslist-db@latest

      - name: Debug Project Structure
        run: |
          echo "Project directory structure:"
          ls -R
          if [ -f "tauri.conf.json" ]; then
            echo "tauri.conf.json contents:"
            cat tauri.conf.json
          else
            echo "Warning: tauri.conf.json not found"
          fi

      - name: Run Tests
        continue-on-error: true
        run: |
          bun test || echo "Warning: No Bun tests found. Ensure test files have .test, _test_, .spec, or _spec_ in the filename."
          if [ -f "Cargo.toml" ]; then
            cargo test || echo "Warning: Rust tests failed or no tests found"
          else
            echo "Info: No Cargo.toml found, skipping Rust tests"
          fi

      - name: Security Scan
        if: hashFiles('**/Cargo.toml') != ''
        continue-on-error: true
        run: |
          cargo install cargo-audit
          cargo audit || echo "Warning: Security scan issues detected"

      - name: Ensure resources exist
        run: |
          mkdir -p src-tauri/downloads src-tauri/binaries
          touch src-tauri/downloads/.gitkeep src-tauri/binaries/.gitkeep || echo "Warning: Failed to create .gitkeep files"

      - name: Build macOS App
        run: |
          echo "Running Tauri build for ${{ matrix.arch }}"
          bun run tauri:build:mac:${{ matrix.arch }}
          echo "Listing build output directories:"
          find . -type d -name "bundle" -exec ls -R {} \; || echo "No bundle directories found"

      - name: Prepare artifacts
        shell: bash
        continue-on-error: true  # Prevent pipeline failure
        run: |
          mkdir -p upload_artifacts
          # Search for artifacts in broader scope to catch non-standard paths
          find . -type f \( -name "*.dmg" -o -name "*.app" \) 2>/dev/null | while read file; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              newname=$(echo "$filename" | sed -E 's/_[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?_/_/g' | sed 's/__/_/g')
              cp "$file" "upload_artifacts/$newname"
              echo "✓ Copied: $newname"
            fi
          done
          # Generate checksums
          cd upload_artifacts || exit 1
          for file in *; do
            if [ -f "$file" ] && [ "$file" != ".no_macos_artifact" ]; then
              shasum -a 256 "$file" > "$file.sha256"
              echo "✓ Generated checksum: $file.sha256"
            fi
          done
          # Check if artifacts exist
          if [ -z "$(find upload_artifacts -maxdepth 1 -type f ! -name '.no_macos_artifact' 2>/dev/null)" ]; then
            echo '⚠ No macOS artifacts found. Listing possible target directories for debugging:'
            find . -type d -name "target" -exec ls -R {} \; || echo "No target directories found"
            touch upload_artifacts/.no_macos_artifact || echo "Warning: Failed to create .no_macos_artifact"
          else
            echo "Artifacts prepared:"
            ls -lh upload_artifacts
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ChanoX-macos-${{ matrix.arch }}
          path: upload_artifacts/*
          retention-days: 7