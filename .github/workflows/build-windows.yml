name: Build Windows

on:
  push:
    branches:
      - main
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Cache Rust
        if: hashFiles('**/Cargo.toml') != ''  # Only cache if Cargo.toml exists
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-${{ matrix.arch }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-cargo-

      - name: Debug Project Structure
        shell: pwsh
        run: |
          Write-Host "Project directory structure:"
          Get-ChildItem -Recurse | Format-Table -AutoSize

      - name: Run Tests
        shell: pwsh
        continue-on-error: true  # Prevent pipeline failure
        run: |
          bun test || Write-Host "Warning: No Bun tests found. Ensure test files have .test, _test_, .spec, or _spec_ in the filename."
          if (Test-Path "Cargo.toml") {
            cargo test || Write-Host "Warning: Rust tests failed or no tests found"
          } else {
            Write-Host "Info: No Cargo.toml found, skipping Rust tests"
          }

      - name: Security Scan
        if: hashFiles('**/Cargo.toml') != ''  # Only run if Cargo.toml exists
        shell: pwsh
        continue-on-error: true
        run: |
          cd src-tauri
          cargo install cargo-audit
          cargo audit || Write-Host "Warning: Security scan issues detected"
          cd ..

      - name: Ensure resources exist
        shell: pwsh
        run: |
          if (!(Test-Path "src-tauri/downloads")) { New-Item -ItemType Directory -Path "src-tauri/downloads" }
          if (!(Test-Path "src-tauri/binaries")) { New-Item -ItemType Directory -Path "src-tauri/binaries" }

      - name: Build Windows App
        shell: pwsh
        run: bun run tauri:build:${{ matrix.arch }}

      - name: Prepare artifacts
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path upload_artifacts | Out-Null
          Get-ChildItem -Path src-tauri/target -Recurse -Include *.msi,*.exe -File -ErrorAction SilentlyContinue | ForEach-Object {
            $filename = $_.Name -replace '_\d+\.\d+\.\d+(\.\d+)?_','_' -replace '__','_'
            Copy-Item -Path $_.FullName -Destination (Join-Path $PWD upload_artifacts\$filename)
            Write-Host "✓ Copied: $filename"
          }
          Get-ChildItem upload_artifacts -File -Exclude *.no_windows_artifact | ForEach-Object {
            $hash = Get-FileHash -Path $_.FullName -Algorithm SHA256
            $hash.Hash | Out-File -FilePath "$($_.FullName).sha256"
            Write-Host "✓ Generated checksum: $($_.Name).sha256"
          }
          if ((Get-ChildItem upload_artifacts -File -ErrorAction SilentlyContinue).Count -eq 0) {
            Write-Host '⚠ No windows artifacts found. Listing target folders for debugging:'
            Get-ChildItem src-tauri/target -Recurse | Select-Object -First 50 | Format-Table -AutoSize
            New-Item -ItemType File -Path upload_artifacts\.no_windows_artifact | Out-Null
          }

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ChanoX-windows-${{ matrix.arch }}
          path: upload_artifacts/*
          retention-days: 7