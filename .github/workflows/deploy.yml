name: Build & Release Tauri App

on:
  push:
    tags:
      - "v*"           # Stable release
    branches:
      - main           # Nightly / Preview
  workflow_dispatch:   # กดรันเองได้

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64]
        include:
          - os: macos-latest
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install Linux Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libgtk-3-dev \
            libglib2.0-dev \
            libgdk-pixbuf2.0-dev \
            libpango1.0-dev \
            libcairo2-dev \
            libatk1.0-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libsoup-3.0-dev \
            libwebkit2gtk-4.1-dev 

      - name: Install dependencies
        run: bun install

      - name: Ensure resources exist (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p src-tauri/downloads
          mkdir -p src-tauri/binaries

      - name: Ensure resources exist (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          if (!(Test-Path "src-tauri/downloads")) { New-Item -ItemType Directory -Path "src-tauri/downloads" }
          if (!(Test-Path "src-tauri/binaries")) { New-Item -ItemType Directory -Path "src-tauri/binaries" }
        shell: pwsh

      - name: Build Linux App
        if: matrix.os == 'ubuntu-latest'
        run: bun run tauri:build:linux:x64

      - name: Build Windows App
        if: matrix.os == 'windows-latest'
        run: bun run tauri:build:x64

      - name: Build macOS ARM App
        if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
        run: bun run tauri:build:mac:arm64

      - name: Build macOS x64 App
        if: matrix.os == 'macos-latest' && matrix.arch == 'x64'
        run: bun run tauri:build:mac:x64

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: tauri-${{ matrix.os }}-${{ matrix.arch }}
          path: src-tauri/target/**/release/bundle/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Download all build artifacts
      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: tauri-ubuntu-latest-x64
          path: release_files/linux

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: tauri-windows-latest-x64
          path: release_files/windows

      - name: Download macOS x64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: tauri-macos-latest-x64
          path: release_files/macos-x64

      - name: Download macOS ARM Artifact
        uses: actions/download-artifact@v4
        with:
          name: tauri-macos-latest-arm64
          path: release_files/macos-arm64

      # Set release name dynamically for Nightly / Preview
      - name: Set Release Name
        if: startsWith(github.ref, 'refs/heads/main')
        run: echo "RELEASE_NAME=nightly-$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV

      # For Stable, use tag name; for Nightly, use RELEASE_NAME
      - name: Determine tag/release name
        id: release_name
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "NAME=${RELEASE_NAME}" >> $GITHUB_ENV
          fi

      # Create GitHub Release
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NAME }}
          name: ${{ env.NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload all assets
      - name: Upload all release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release_files/linux/**
            release_files/windows/**
            release_files/macos-x64/**
            release_files/macos-arm64/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
