name: Release ChanoX

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: read  # Default, override in release job

jobs:
  build-linux:
    uses: ./.github/workflows/build-linux.yml

  build-macos:
    uses: ./.github/workflows/build-macos.yml

  build-windows:
    uses: ./.github/workflows/build-windows.yml

  release:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for release creation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release_files
          find artifacts -type f \( -iname "*.deb" -o -iname "*.rpm" -o -iname "*.appimage" -o -iname "*.msi" -o -iname "*.nsis" -o -iname "*.app" -o -iname "*.dmg" -o -name "*.sha256" \)  -print0 | while IFS= read -r -d '' file; do
            filename=$(basename "$file")
            if [ ! -f "release_files/$filename" ]; then
              cp "$file" "release_files/"
              echo "‚úì Copied: $filename"
            else
              echo "‚ö† Skipped duplicate: $filename"
            fi
          done
          if [ -z "$(ls -A release_files 2>/dev/null)" ]; then
            echo "‚ö† No known installers found; falling back to copying any artifact files (excluding .no_* markers)"
            find artifacts -type f ! -name ".no_*" -print0 | while IFS= read -r -d '' file; do
              filename=$(basename "$file")
              if [ ! -f "release_files/$filename" ]; then
                cp "$file" "release_files/"
                echo "‚úì Fallback copied: $filename"
              fi
            done
          fi
          echo "üì¶ Final files:"
          ls -lah release_files/ || echo "No files prepared"

      - name: Determine tag/release name
        id: release_info
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            echo "NAME=${TAG_NAME}" >> $GITHUB_ENV
            echo "IS_NIGHTLY=false" >> $GITHUB_ENV
            echo "IS_NIGHTLY=false" >> $GITHUB_OUTPUT
          else
            NIGHTLY_NAME="nightly-$(date +'%Y%m%d')"
            echo "NAME=${NIGHTLY_NAME}" >> $GITHUB_ENV
            echo "IS_NIGHTLY=true" >> $GITHUB_ENV
            echo "IS_NIGHTLY=true" >> $GITHUB_OUTPUT
          fi

      - name: Check existing nightly release
        if: env.IS_NIGHTLY == 'true'
        id: check_nightly
        run: |
          RELEASE_NAME="${{ env.NAME }}"
          if gh release view "$RELEASE_NAME" >/dev/null 2>&1; then
            echo "EXISTS=true" >> $GITHUB_OUTPUT
            echo "üîÑ Found existing nightly release: $RELEASE_NAME - will update it"
          else
            echo "EXISTS=false" >> $GITHUB_OUTPUT
            echo "‚ú® No existing nightly release found - will create new one"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete existing nightly release
        if: env.IS_NIGHTLY == 'true' && steps.check_nightly.outputs.EXISTS == 'true'
        run: |
          RELEASE_NAME="${{ env.NAME }}"
          echo "üóëÔ∏è Deleting existing release and tag: $RELEASE_NAME"
          gh release delete "$RELEASE_NAME" --yes || true
          git push origin --delete "$RELEASE_NAME" || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get previous tag
        id: previous_tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            PREV_TAG=$(git tag --sort=-v:refname | grep -v "^nightly-" | head -n 2 | tail -n 1)
          else
            PREV_TAG=$(git tag --sort=-v:refname | grep -v "^nightly-" | head -n 1)
          fi
          if [ -z "$PREV_TAG" ]; then
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "PREVIOUS_TAG=$PREV_TAG" >> $GITHUB_OUTPUT
          echo "Previous tag: $PREV_TAG"

      - name: Generate changelog
        id: changelog
        run: |
          REPO="${{ github.repository }}"
          CURRENT_TAG="${{ env.NAME }}"
          PREV_TAG="${{ steps.previous_tag.outputs.PREVIOUS_TAG }}"
          COMMITS=$(git log --oneline --no-merges "${PREV_TAG}..HEAD" | head -n 10 || echo "No changes found")
          if [[ "${{ env.IS_NIGHTLY }}" == "true" ]]; then
            CHANGELOG="## üåô Nightly Build - $(date +'%Y-%m-%d')

          This is an automated nightly build from the latest \`main\` branch.

          **‚ö†Ô∏è Warning**: Nightly builds may contain unstable features and bugs.

          **Recent Changes**:
          $COMMITS

          **Full Changelog**: https://github.com/${REPO}/compare/${PREV_TAG}...main

          ---

          ### üì¶ Downloads

          Choose the appropriate installer for your operating system:

          **Windows:**
          - \`.msi\` - Windows installer
          - \`.exe\` - Windows portable (if available)

          **macOS (Apple Silicon):**
          - \`.dmg\` - macOS installer
          - \`.app\` - macOS app bundle (if available)

          **Linux:**
          - \`.deb\` - Debian/Ubuntu package
          - \`.AppImage\` - Universal Linux application
          "
          else
            CHANGELOG="## üöÄ What's Changed

          **Recent Changes**:
          $COMMITS

          **Full Changelog**: https://github.com/${REPO}/compare/${PREV_TAG}...${CURRENT_TAG}

          ---

          ### üì¶ Downloads

          Choose the appropriate installer for your operating system:

          **Windows:**
          - \`.msi\` - Windows installer
          - \`.exe\` - Windows portable (if available)

          **macOS (Apple Silicon):**
          - \`.dmg\` - macOS installer
          - \`.app\` - macOS app bundle (if available)

          **Linux:**
          - \`.deb\` - Debian/Ubuntu package
          - \`.AppImage\` - Universal Linux application
          "
          fi
          {
            echo 'CHANGELOG<<EOF'
            echo "$CHANGELOG"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2  # Updated to v2
        with:
          tag_name: ${{ env.NAME }}
          name: ${{ env.NAME }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          files: release_files/*
          draft: false
          prerelease: ${{ env.IS_NIGHTLY == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}