name: Build & Release Tauri App

on:
  push:
    tags:
      - "v*"
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64]
        include:
          - os: macos-latest
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache Bun dependencies
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      # Cache Rust dependencies
      - name: Cache Rust
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-${{ matrix.arch }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-cargo-

      - name: Install Linux Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libgtk-3-dev \
            libglib2.0-dev \
            libgdk-pixbuf2.0-dev \
            libpango1.0-dev \
            libcairo2-dev \
            libatk1.0-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libsoup-3.0-dev \
            libwebkit2gtk-4.1-dev

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Ensure resources exist (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p src-tauri/downloads
          mkdir -p src-tauri/binaries

      - name: Ensure resources exist (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          if (!(Test-Path "src-tauri/downloads")) { New-Item -ItemType Directory -Path "src-tauri/downloads" }
          if (!(Test-Path "src-tauri/binaries")) { New-Item -ItemType Directory -Path "src-tauri/binaries" }
        shell: pwsh

      - name: Build Linux App
        if: matrix.os == 'ubuntu-latest'
        run: bun run tauri:build:linux:x64

      - name: Build Windows App
        if: matrix.os == 'windows-latest'
        run: bun run tauri:build:x64

      - name: Build macOS ARM App
        if: matrix.os == 'macos-latest'
        run: bun run tauri:build:mac:arm64

      # Upload เฉพาะไฟล์ installer (ไม่รวม build scripts)
      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p upload_artifacts
          
          # Linux 
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            find src-tauri/target -path "*/bundle/*" -type f \( -name "*.deb" -o -name "*.AppImage" \) -exec cp {} upload_artifacts/ \;
          fi
          
          # Windows
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
             find src-tauri/target -path "*/bundle/*" -type f -name "*.msi" ! -name "build_script_*" -exec cp {} upload_artifacts/ \; 2>/dev/null || true
          fi
          
          # macOS (ARM64 only)
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            find src-tauri/target -path "*/bundle/*" -type f -name "*.dmg" -exec cp {} upload_artifacts/ \;
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ChanoX-${{ matrix.os }}-${{ matrix.arch }}
          path: upload_artifacts/*
          retention-days: 1  # เก็บแค่ 1 วัน เพราะจะ release ทันที

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_files

      - name: Set Release Name
        if: startsWith(github.ref, 'refs/heads/main')
        run: echo "RELEASE_NAME=nightly-$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV

      - name: Determine tag/release name
        id: release_name
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "NAME=${RELEASE_NAME}" >> $GITHUB_ENV
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NAME }}
          name: ${{ env.NAME }}
          files: release_files/**/*
          draft: false
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
