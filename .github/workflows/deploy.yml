name: Build & Release Tauri App

on:
  push:
    tags:
      - "v*"
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64]
        include:
          - os: macos-latest
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache Bun dependencies
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      # Cache Rust dependencies
      - name: Cache Rust
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-${{ matrix.arch }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-cargo-

      - name: Install Linux Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libgtk-3-dev \
            libglib2.0-dev \
            libgdk-pixbuf2.0-dev \
            libpango1.0-dev \
            libcairo2-dev \
            libatk1.0-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libsoup-3.0-dev \
            libwebkit2gtk-4.1-dev \
            xvfb

      - name: Build Linux App
        if: matrix.os == 'ubuntu-latest'
        run: xvfb-run -a bun run tauri:build:linux:x64

      - name: Ensure resources exist (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          # สร้าง directories และ placeholder files
          mkdir -p src-tauri/downloads src-tauri/binaries
          touch src-tauri/downloads/.gitkeep src-tauri/binaries/.gitkeep

          echo "📁 Directory structure:"
          ls -la src-tauri/

      - name: Ensure resources exist (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          if (!(Test-Path "src-tauri/downloads")) { New-Item -ItemType Directory -Path "src-tauri/downloads" }
          if (!(Test-Path "src-tauri/binaries")) { New-Item -ItemType Directory -Path "src-tauri/binaries" }
        shell: pwsh

      - name: Build Linux App
        if: matrix.os == 'ubuntu-latest'
        run: bun run tauri:build:linux:x64

      - name: Build Windows App
        if: matrix.os == 'windows-latest'
        run: bun run tauri:build:x64

      - name: Build macOS ARM App
        if: matrix.os == 'macos-latest'
        run: bun run tauri:build:mac:arm64

      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p upload_artifacts
          
          # Linux 
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            # คัดลอกไฟล์ installer และสร้าง tar.gz
            find src-tauri/target -path "*/bundle/*" -type f \( -name "*.deb" -o -name "*.AppImage" \) 2>/dev/null | while read file; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                # ลบเวอร์ชันออกจากชื่อไฟล์
                newname=$(echo "$filename" | sed -E "s/_[0-9]+\.[0-9]+\.[0-9]+/_/g" | sed "s/__/_/g")
                cp "$file" "upload_artifacts/$newname"
                echo "✓ Copied: $newname"
          
                # สร้าง tar.gz สำหรับ AppImage
                if [[ "$filename" == *.AppImage ]]; then
                  app_name=$(echo "$newname" | sed "s/.AppImage//g")
                  tar -czf "upload_artifacts/${app_name}.tar.gz" -C "$(dirname "$file")" "$filename"
                  echo "✓ Created archive: ${app_name}.tar.gz"
                fi
              fi
            done
          fi
          
          # Windows
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            # คัดลอกไฟล์ MSI installer
            find src-tauri/target -path "*/bundle/*" -type f -name "*.msi" ! -name "build_script_*" 2>/dev/null | while read file; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                # ลบเวอร์ชันออกจากชื่อไฟล์
                newname=$(echo "$filename" | sed -E "s/_[0-9]+\.[0-9]+\.[0-9]+/_/g" | sed "s/__/_/g")
                cp "$file" "upload_artifacts/$newname"
                echo "✓ Copied: $newname"
              fi
            done
          
            # สร้างไฟล์ zip จาก release build
            if [ -d "src-tauri/target/release" ]; then
              cd src-tauri/target/release
              if ls *.exe 1> /dev/null 2>&1; then
                app_name=$(ls *.exe | head -n1 | sed 's/.exe//g')
                zip -r "${app_name}.zip" *.exe *.dll 2>/dev/null || zip -r "${app_name}.zip" *.exe 2>/dev/null || true
                if [ -f "${app_name}.zip" ]; then
                  mv "${app_name}.zip" "$GITHUB_WORKSPACE/upload_artifacts/"
                  echo "✓ Created archive: ${app_name}.zip"
                fi
              fi
              cd "$GITHUB_WORKSPACE"
            fi
          fi
          
          # macOS (ARM64 only)
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            # คัดลอกไฟล์ DMG installer
            find src-tauri/target -path "*/bundle/*" -type f -name "*.dmg" 2>/dev/null | while read file; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                # ลบเวอร์ชันออกจากชื่อไฟล์
                newname=$(echo "$filename" | sed -E "s/_[0-9]+\.[0-9]+\.[0-9]+/_/g" | sed "s/__/_/g")
                cp "$file" "upload_artifacts/$newname"
                echo "✓ Copied: $newname"
              fi
            done
          
            # สร้างไฟล์ tar.gz จาก .app bundle
            find src-tauri/target -type d -path "*/bundle/macos/*.app" 2>/dev/null | while read app_bundle; do
              if [ -d "$app_bundle" ]; then
                app_name=$(basename "$app_bundle" .app)
                app_dir=$(dirname "$app_bundle")
                cd "$app_dir"
                tar -czf "${app_name}.tar.gz" "$(basename "$app_bundle")"
                mv "${app_name}.tar.gz" "$GITHUB_WORKSPACE/upload_artifacts/"
                echo "✓ Created archive: ${app_name}.tar.gz"
                cd "$GITHUB_WORKSPACE"
              fi
            done
          fi
          
          echo ""
          echo "📦 All prepared files:"
          ls -lh upload_artifacts/ 2>/dev/null || echo "No files found"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ChanoX-${{ matrix.os }}-${{ matrix.arch }}
          path: upload_artifacts/*
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release_files
          
          find artifacts -type f \( -name "*.deb" -o -name "*.AppImage" -o -name "*.msi" -o -name "*.dmg" -o -name "*.tar.gz" -o -name "*.zip" \) | while read file; do
            filename=$(basename "$file")
            if [ ! -f "release_files/$filename" ]; then
              cp "$file" "release_files/"
              echo "✓ Copied: $filename"
            else
              echo "⚠ Skipped duplicate: $filename"
            fi
          done
          
          echo "📦 Final files:"
          ls -lh release_files/

      - name: Determine tag/release name
        id: release_info
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            # Tagged release
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            echo "NAME=${TAG_NAME}" >> $GITHUB_ENV
            echo "IS_NIGHTLY=false" >> $GITHUB_ENV
            echo "IS_NIGHTLY=false" >> $GITHUB_OUTPUT
          else
            # Nightly release - ใช้ชื่อแบบวันเดียว
            NIGHTLY_NAME="nightly-$(date +'%Y%m%d')"
            echo "NAME=${NIGHTLY_NAME}" >> $GITHUB_ENV
            echo "IS_NIGHTLY=true" >> $GITHUB_ENV
            echo "IS_NIGHTLY=true" >> $GITHUB_OUTPUT
          fi

      - name: Check existing nightly release
        if: env.IS_NIGHTLY == 'true'
        id: check_nightly
        run: |
          RELEASE_NAME="${{ env.NAME }}"
          
          # ตรวจสอบว่ามี release ชื่อนี้อยู่แล้วหรือไม่
          if gh release view "$RELEASE_NAME" >/dev/null 2>&1; then
            echo "EXISTS=true" >> $GITHUB_OUTPUT
            echo "🔄 Found existing nightly release: $RELEASE_NAME - will update it"
          else
            echo "EXISTS=false" >> $GITHUB_OUTPUT
            echo "✨ No existing nightly release found - will create new one"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete existing nightly release
        if: env.IS_NIGHTLY == 'true' && steps.check_nightly.outputs.EXISTS == 'true'
        run: |
          RELEASE_NAME="${{ env.NAME }}"
          echo "🗑️ Deleting existing release and tag: $RELEASE_NAME"
          gh release delete "$RELEASE_NAME" --yes || true
          git push origin --delete "$RELEASE_NAME" || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get previous tag
        id: previous_tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            # สำหรับ tagged release ให้หา tag ก่อนหน้า
            PREV_TAG=$(git tag --sort=-v:refname | grep -v "^nightly-" | head -n 2 | tail -n 1)
          else
            # สำหรับ nightly ให้หา tag ล่าสุดที่ไม่ใช่ nightly
            PREV_TAG=$(git tag --sort=-v:refname | grep -v "^nightly-" | head -n 1)
          fi
          
          if [ -z "$PREV_TAG" ]; then
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "PREVIOUS_TAG=$PREV_TAG" >> $GITHUB_OUTPUT
          echo "Previous tag: $PREV_TAG"

      - name: Generate changelog
        id: changelog
        run: |
          REPO="${{ github.repository }}"
          CURRENT_TAG="${{ env.NAME }}"
          PREVIOUS_TAG="${{ steps.previous_tag.outputs.PREVIOUS_TAG }}"
          
          if [[ "${{ env.IS_NIGHTLY }}" == "true" ]]; then
            CHANGELOG="## 🌙 Nightly Build - $(date +'%Y-%m-%d')
          
          This is an automated nightly build from the latest \`main\` branch.
          
          **⚠️ Warning**: Nightly builds may contain unstable features and bugs.
          
          **Full Changelog**: https://github.com/${REPO}/compare/${PREVIOUS_TAG}...main
          
          ---
          
          ### 📦 Downloads
          
          **Installers:**
          - **Windows**: \`.msi\` installer
          - **macOS**: \`.dmg\` installer (Apple Silicon)
          - **Linux**: \`.deb\` package or \`.AppImage\`
          
          **Portable/Archive versions:**
          - **Windows**: \`.zip\` (no installation required)
          - **macOS**: \`.tar.gz\` (no installation required)
          - **Linux**: \`.tar.gz\` (no installation required)
          "
          else
            CHANGELOG="## 🚀 What's Changed
          
          **Full Changelog**: https://github.com/${REPO}/compare/${PREVIOUS_TAG}...${CURRENT_TAG}
          
          ---
          
          ### 📦 Downloads
          
          **Installers:**
          - **Windows**: \`.msi\` installer
          - **macOS**: \`.dmg\` installer (Apple Silicon)
          - **Linux**: \`.deb\` package or \`.AppImage\`
          
          **Portable/Archive versions:**
          - **Windows**: \`.zip\` (no installation required)
          - **macOS**: \`.tar.gz\` (no installation required)
          - **Linux**: \`.tar.gz\` (no installation required)
          "
          fi
          
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NAME }}
          name: ${{ env.NAME }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          files: release_files/*
          draft: false
          prerelease: ${{ env.IS_NIGHTLY == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}