name: Release ChanoX

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: read  # Default, override in release job

jobs:
  build-linux:
    uses: ./.github/workflows/build-linux.yml

  build-macos:
    uses: ./.github/workflows/build-macos.yml

  build-windows:
    uses: ./.github/workflows/build-windows.yml

  release:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for release creation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          set -euo pipefail

          mkdir -p release_files

          find artifacts -type f \( -iname "*.deb" -o -iname "*.rpm" -o -iname "*.appimage" -o -iname "*.msi" -o -iname "*.nsis" -o -iname "*.app" -o -iname "*.dmg" -o -iname "*.exe" -o -name "*.sha256" \) -print0 | while IFS= read -r -d '' file; do
            artdir=$(basename "$(dirname "$file")")
            filename=$(basename "$file")
            dest="release_files/$filename"

            if [ -f "$dest" ]; then
              dest="release_files/${artdir}-$filename"
              if [ -f "$dest" ]; then
                i=1
                while [ -f "release_files/${artdir}-$i-$filename" ]; do
                  i=$((i+1))
                done
                dest="release_files/${artdir}-$i-$filename"
              fi
            fi

            cp "$file" "$dest"
            echo "✅ Copied: $file -> $dest"
          done

          if [ -z "$(ls -A release_files 2>/dev/null)" ]; then
            echo "⚠️ No known installers found; falling back to copying any artifact files (excluding .no_* markers)"
            find artifacts -type f ! -name ".no_*" -print0 | while IFS= read -r -d '' file; do
              filename=$(basename "$file")
              dest="release_files/$filename"
              if [ -f "$dest" ]; then
                artdir=$(basename "$(dirname "$file")")
                dest="release_files/${artdir}-$filename"
                if [ -f "$dest" ]; then
                  i=1
                  while [ -f "release_files/${artdir}-$i-$filename" ]; do
                    i=$((i+1))
                  done
                  dest="release_files/${artdir}-$i-$filename"
                fi
              fi
              cp "$file" "$dest"
              echo "✅ Fallback copied: $file -> $dest"
            done
          fi

          echo "📦 Final files:"
          ls -lah release_files/ || echo "No files prepared"

      - name: Determine tag/release name
        id: release_info
        run: |
          set -euo pipefail

          if [[ "${GITHUB_REF:-}" == refs/tags/* ]]; then
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            echo "NAME=${TAG_NAME}" >> $GITHUB_ENV
            echo "IS_NIGHTLY=false" >> $GITHUB_ENV
            echo "IS_NIGHTLY=false" >> $GITHUB_OUTPUT
            echo "NAME=${TAG_NAME}" >> $GITHUB_OUTPUT
          else
            NIGHTLY_NAME="nightly-$(date +'%Y%m%d')"
            echo "NAME=${NIGHTLY_NAME}" >> $GITHUB_ENV
            echo "IS_NIGHTLY=true" >> $GITHUB_ENV
            echo "IS_NIGHTLY=true" >> $GITHUB_OUTPUT
            echo "NAME=${NIGHTLY_NAME}" >> $GITHUB_OUTPUT
          fi

      - name: Check existing nightly release
        if: env.IS_NIGHTLY == 'true'
        id: check_nightly
        run: |
          set -euo pipefail
          RELEASE_NAME="${{ env.NAME }}"

          if gh release view "$RELEASE_NAME" >/dev/null 2>&1; then
            echo "EXISTS=true" >> $GITHUB_OUTPUT
            echo "🔄 Found existing nightly release: $RELEASE_NAME - will update it"
          else
            echo "EXISTS=false" >> $GITHUB_OUTPUT
            echo "✨ No existing nightly release found - will create new one"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete existing nightly release
        if: env.IS_NIGHTLY == 'true' && steps.check_nightly.outputs.EXISTS == 'true'
        run: |
          set -euo pipefail
          RELEASE_NAME="${{ env.NAME }}"
          echo "🗑️ Deleting existing release and tag: $RELEASE_NAME"
          gh release delete "$RELEASE_NAME" --yes || true
          git push origin --delete "$RELEASE_NAME" || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get previous tag
        id: previous_tag
        run: |
          set -euo pipefail

          if [[ "${GITHUB_REF:-}" == refs/tags/* ]]; then
            PREV_TAG=$(git tag --sort=-v:refname | grep -v "^nightly-" | sed -n '1,2p' | sed -n '2p' || true)
          else
            PREV_TAG=$(git tag --sort=-v:refname | grep -v "^nightly-" | sed -n '1p' || true)
          fi

          if [ -z "${PREV_TAG:-}" ]; then
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi

          PREV_TAG=$(echo "$PREV_TAG" | tr -d '\n' | sed -e 's/^\s*//' -e 's/\s*$//')
          echo "PREVIOUS_TAG=$PREV_TAG" >> $GITHUB_OUTPUT
          echo "Previous tag: $PREV_TAG"

      - name: Generate changelog
        id: changelog
        run: |
          set -euo pipefail

          REPO="${{ github.repository }}"
          CURRENT_TAG="${{ env.NAME }}"
          PREV_TAG="${{ steps.previous_tag.outputs.PREVIOUS_TAG }}"

          if git rev-parse --verify "$PREV_TAG" >/dev/null 2>&1; then
            COMMITS=$(git --no-pager log --oneline --no-merges "$PREV_TAG..HEAD" | head -n 50 || echo "No changes found")
          else
            COMMITS=$(git --no-pager log --oneline --no-merges HEAD | head -n 50 || echo "No changes found")
          fi

          if [[ "${{ env.IS_NIGHTLY }}" == "true" ]]; then
            CHANGELOG=$(cat <<'EOF'
          ## 🌙 Nightly Build - $(date +'%Y-%m-%d')

          This is an automated nightly build from the latest `main` branch.

          **⚠️ Warning**: Nightly builds may contain unstable features and bugs.

          ### Recent Changes

          $(echo "$COMMITS")

          **Full Changelog**: https://github.com/$(echo "$REPO")/compare/$(echo "$PREV_TAG")...main

          ---

          ## 📦 Downloads

          Choose the appropriate installer for your operating system:

          ### Windows
          - **.msi** - Windows installer (recommended)
          - **.nsis** - Windows installer (NSIS)
          - **.exe** - Windows portable (if available)

          ### macOS (Apple Silicon / Intel)
          - **.dmg** - macOS installer (recommended)
          - **.app** - macOS app bundle (if available)

          ### Linux
          - **.deb** - Debian/Ubuntu package
          - **.rpm** - RedHat/Fedora/openSUSE package
          - **.AppImage** - Universal Linux application (no installation required)
          EOF
          )
            CHANGELOG=$(eval "echo \"$CHANGELOG\"")
          else
            CHANGELOG=$(cat <<'EOF'
          ## 🚀 What's Changed

          ### Recent Changes

          $(echo "$COMMITS")

          **Full Changelog**: https://github.com/$(echo "$REPO")/compare/$(echo "$PREV_TAG")...$(echo "$CURRENT_TAG")

          ---

          ## 📦 Downloads

          Choose the appropriate installer for your operating system:

          ### Windows
          - **.msi** - Windows installer (recommended)
          - **.nsis** - Windows installer (NSIS)
          - **.exe** - Windows portable (if available)

          ### macOS (Apple Silicon / Intel)
          - **.dmg** - macOS installer (recommended)
          - **.app** - macOS app bundle (if available)

          ### Linux
          - **.deb** - Debian/Ubuntu package
          - **.rpm** - RedHat/Fedora/openSUSE package
          - **.AppImage** - Universal Linux application (no installation required)
          EOF
          )
            CHANGELOG=$(eval "echo \"$CHANGELOG\"")
          fi

          {
            echo 'CHANGELOG<<EOF'
            echo "$CHANGELOG"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NAME }}
          name: ${{ env.NAME }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          files: release_files/*
          draft: false
          prerelease: ${{ env.IS_NIGHTLY == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}